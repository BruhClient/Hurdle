// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  username              String?                @unique
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  isTwoFactorEnabled    Boolean                @default(true)
  followers             Follows[]              @relation("following")
  following             Follows[]              @relation("follower")
  role                  UserRole               @default(USER)
  twoFactorConfirmation TwoFactorConfirmation?
  posts                 Post[]
  likes                 Like[]
  commentLikes          CommentLikes[]
  comment               Comment[]
  commentReplies        CommentReply[]
  accounts              Account[]
  sessions              Session[]
  CommentReplyLikes     CommentReplyLikes[]

  @@map("users")
}

model VerificationToken {
  id    String @id @default(cuid())
  email String
  token String @unique

  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([userId])
}

enum UserRole {
  USER
  ADMIN
}

model Post {
  id        String    @id @default(cuid())
  images    Json
  caption   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  likes     Like[]
  comments  Comment[]
}

model Like {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  @@id([userId, postId])
}

model CommentLikes {
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@id([userId, commentId])
}

model CommentReplyLikes {
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  commentReply   CommentReply @relation(fields: [commentReplyId], references: [id], onDelete: Cascade)
  commentReplyId String

  @@id([commentReplyId, userId])
}

model Comment {
  id        String         @id @default(cuid())
  author    User           @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  message   String
  post      Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  replies   CommentReply[]
  likes     CommentLikes[]
}

model CommentReply {
  id        String              @id @default(cuid())
  message   String
  comment   Comment             @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  author    User                @relation(fields: [authorId], references: [id])
  authorId  String
  likes     CommentReplyLikes[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}
